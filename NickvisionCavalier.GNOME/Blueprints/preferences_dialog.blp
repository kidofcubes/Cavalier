using Gtk 4.0;
using Adw 1;

Adw.PreferencesWindow _root {
  default-width: 620;
  default-height: 500;
  modal: false;
  destroy-with-parent: true;
  hide-on-close: true;
  title: _("Preferences");

  Adw.PreferencesPage {
    title: _("Cavalier");
    icon-name: "org.nickvision.cavalier-symbolic";

    Adw.PreferencesGroup {
      title: _("Drawing mode");

      [header-suffix]
      Gtk.Box {
        halign: center;

        Gtk.ToggleButton _boxButton {
          label: _("Box");
        }

        Gtk.ToggleButton {
          label: _("Circle");
          active: bind _boxButton.active bidirectional inverted;
        }

        styles ["linked"]
      }

      Adw.ActionRow {
        title: _("Wave");
        activatable-widget: _waveCheckButton;

        [prefix]
        Gtk.CheckButton _waveCheckButton {}
      }

      Adw.ActionRow {
        title: _("Levels");
        activatable-widget: _levelsCheckButton;

        [prefix]
        Gtk.CheckButton _levelsCheckButton {
          group: _waveCheckButton;
        }
      }

      Adw.ActionRow {
        title: _("Particles");
        activatable-widget: _particlesCheckButton;

        [prefix]
        Gtk.CheckButton _particlesCheckButton {
          group: _waveCheckButton;
        }
      }

      Adw.ActionRow {
        title: _("Bars");
        activatable-widget: _barsCheckButton;

        [prefix]
        Gtk.CheckButton _barsCheckButton {
          group: _waveCheckButton;
        }
      }

      Adw.ActionRow _spineRow {
        title: _("Spine");
        activatable-widget: _spineCheckButton;

        [prefix]
        Gtk.CheckButton _spineCheckButton {
          group: _waveCheckButton;
        }
      }

      Adw.ActionRow {
        title: _("Splitter");
        activatable-widget: _splitterCheckButton;
        sensitive: bind _boxButton.active;

        [prefix]
        Gtk.CheckButton _splitterCheckButton {
          group: _waveCheckButton;
        }
      }
    }

    Adw.PreferencesGroup {
      visible: bind _boxButton.active inverted;

      Adw.ActionRow {
        title: _("Radius");

        [suffix]
        Gtk.Scale _radiusScale {
          width-request: 150;
          draw-value: false;
          adjustment: Gtk.Adjustment {
            lower: 0.2;
            upper: 0.8;
            step-increment: 0.05;
          };
        }
      }

      Adw.ActionRow {
        title: _("Rotation");

        [suffix]
        Gtk.Scale _rotationScale {
          width-request: 150;
          draw-value: false;
          adjustment: Gtk.Adjustment {
            lower: 0;
            upper: 6.284;
            step-increment: 0.01;
          };
        }
      }
    }

    Adw.PreferencesGroup {
      Adw.ComboRow _mirrorRow {
        title: _("Mirror");
      }

      Adw.ActionRow _reverseMirrorRow {
        title: _("Reverse mirror");
        activatable-widget: _reverseMirrorSwitch;

        [suffix]
        Gtk.Switch _reverseMirrorSwitch {
          valign: center;
        }
      }
    }

    Adw.PreferencesGroup {
      Adw.ComboRow _directionRow {
        title: _("Drawing direction");
        model: Gtk.StringList {
          strings [_("Top to bottom"), _("Bottom to top"), _("Left to right"), _("Right to left") ]
        };
      }

      Adw.ActionRow {
        title: _("Drawing area margin");
        subtitle: _("Size of gaps around drawing area (in pixels).");

        [suffix]
        Gtk.Scale _marginScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 0;
            upper: 40;
            step-increment: 1;
          };
        }
      }

      Adw.ActionRow {
        title: _("Drawing area X offset");

        [suffix]
        Gtk.Scale _areaOffsetXScale {
          width-request: 150;
          draw-value: false;
          adjustment: Gtk.Adjustment {
            lower: -0.5;
            upper: 0.5;
            step-increment: 0.01;
          };
        }
      }

      Adw.ActionRow {
        title: _("Drawing area Y offset");

        [suffix]
        Gtk.Scale _areaOffsetYScale {
          width-request: 150;
          draw-value: false;
          adjustment: Gtk.Adjustment {
            lower: -0.5;
            upper: 0.5;
            step-increment: 0.01;
          };
        }
      }

      Adw.ActionRow _offsetRow {
        title: _("Offset between items");
        subtitle: _("The size of spaces between elements (in percent).");

        [suffix]
        Gtk.Scale _offsetScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 0;
            upper: 20;
            step-increment: 1;
          };
        }
      }

      Adw.ActionRow _roundnessRow {
        title: _("Roundness of items");
        subtitle: _("How much rounded the elements should be (in percent).");

        [suffix]
        Gtk.Scale _roundnessScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 0;
            upper: 100;
            step-increment: 1;
          };
        }
      }

      Adw.ActionRow {
        title: _("Filling");
        subtitle: _("Whether shapes should be filled or outlined.");
        activatable-widget: _fillingSwitch;

        [suffix]
        Gtk.Switch _fillingSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Squared");
        subtitle: _("Whether particles should use the same (minimum of defaults) width and height.");
        activatable-widget: _squaringSwitch;
        sensitive: bind _particlesCheckButton.active;

        [suffix]
        Gtk.Switch _squaringSwitch {
          valign: center;
        }
      }

      Adw.ActionRow _thicknessRow {
        title: _("Thickness of lines");
        subtitle: _("Thickness of lines when filling is off (in pixels).");
        sensitive: bind _fillingSwitch.active inverted;

        [suffix]
        Gtk.Scale _thicknessScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 1;
            upper: 10;
            step-increment: 1;
          };
        }
      }
    }

    Adw.PreferencesGroup {
      Adw.ActionRow {
        title: _("Borderless window");
        subtitle: _("Whether to disable window shadow and borders.");
        activatable-widget: _borderlessSwitch;

        [suffix]
        Gtk.Switch _borderlessSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Sharp corners");
        subtitle: _("Whether the main window corners should be sharp.");
        activatable-widget: _sharpCornersSwitch;

        [suffix]
        Gtk.Switch _sharpCornersSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Window controls");
        subtitle: _("Whether to show window control buttons.");
        activatable-widget: _windowControlsSwitch;

        [suffix]
        Gtk.Switch _windowControlsSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Autohide headerbar");
        subtitle: _("Whether to hide headerbar when main window is not focused.");
        activatable-widget: _autohideHeaderSwitch;

        [suffix]
        Gtk.Switch _autohideHeaderSwitch {
          valign: center;
        }
      }
    }
  }

  Adw.PreferencesPage {
    title: "CAVA";
    icon-name: "utilities-terminal-symbolic";

    Adw.PreferencesGroup {
      Adw.ComboRow _framerateRow {
        title: _("Framerate");
        subtitle: _("Number of frames per second.");
        model: Gtk.StringList {
          strings ["30", "60", "90", "120", "144", _("Custom")]
        };
      }

      Adw.EntryRow _customFramerateRow {
        show-apply-button: true;
        title: _("Custom Framerate");
        visible: false;
      }

      Adw.ActionRow {
        title: _("Number of bars");

        [suffix]
        Gtk.Scale _barsScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 6;
            upper: 100;
            step-increment: 2;
          };
        }
      }

      Adw.ActionRow {
        title: _("Automatic sensitivity");
        subtitle: _("Attempt to decrease sensitivity if the bars peak.");
        activatable-widget: _autosensSwitch;

        [suffix]
        Gtk.Switch _autosensSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Sensitivity");
        subtitle: _("Manual sensitivity. If automatic sensitivity is enabled, this will only be the initial value.");

        [suffix]
        Gtk.Scale _sensitivityScale {
          width-request: 150;
          draw-value: false;
          adjustment: Gtk.Adjustment {
            lower: 10;
            upper: 250;
            step-increment: 10;
          };
        }
      }

      Adw.ActionRow {
        title: _("Channels");

        [suffix]
        Gtk.Box {
          valign: center;

          Gtk.ToggleButton _monoButton {
            label: _("Mono");
          }

          Gtk.ToggleButton _stereoButton {
            label: _("Stereo");
            active: bind _monoButton.active inverted bidirectional;
          }

          styles ["linked"]
        }
      }

      Adw.ActionRow {
        title: _("Monstercat smoothing");
        subtitle: _("Whether to enable the so-called «Monstercat smoothing».");
        activatable-widget: _monstercatSwitch;

        [suffix]
        Gtk.Switch _monstercatSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Noise reduction");
        subtitle: _("This factor adjusts the integral and gravity filters to keep the signal smooth.\nHigher value leads to a slower and smoother result.");

        [suffix]
        Gtk.Scale _noiseReductionScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 15;
            upper: 95;
            step-increment: 1;
          };
        }
      }

      Adw.ActionRow {
        title: _("Reverse order");
        subtitle: _("Whether to reverse order of bars for each channel.");
        activatable-widget: _reverseSwitch;

        [suffix]
        Gtk.Switch _reverseSwitch {
          valign: center;
        }
      }
    }
  }

  Adw.PreferencesPage {
    title: _("Colors");
    icon-name: "applications-graphics-symbolic";

    Gtk.Box {
      Gtk.Box {
        orientation: vertical;

        Gtk.ScrolledWindow {
          hscrollbar-policy: never;

          child: Gtk.ListBox _profilesList {
            vexpand: true;
            width-request: 140;
          };
        }

        Gtk.Button _addProfileButton {
          margin-top: 6;
          margin-start: 6;
          margin-end: 6;
          margin-bottom: 6;

          child: Adw.ButtonContent {
            label: _("Add Profile");
            icon-name: "list-add-symbolic";
          };

          styles [ "flat" ]
        }
      }

      Gtk.Separator {}

      Gtk.ScrolledWindow {
        hscrollbar-policy: never;

        child: Gtk.Box {
          orientation: vertical;
          spacing: 12;
          margin-top: 12;
          margin-start: 12;
          margin-end: 12;
          margin-bottom: 12;

          Adw.PreferencesGroup {
            Adw.ActionRow {
              title: _("Application Theme");
              title-lines: 1;

              [suffix]
              Gtk.Box {
                valign: center;

                Gtk.ToggleButton _lightThemeButton {
                  label: _("Light");
                }

                Gtk.ToggleButton {
                  label: _("Dark");
                  active: bind _lightThemeButton.active bidirectional inverted;
                }

                styles [ "linked" ]
              }
            }
          }

          Gtk.Grid _colorsGrid {
            hexpand: true;
            vexpand: true;
            column-homogeneous: true;
            column-spacing: 8;

            Gtk.Box {
              halign: center;
              spacing: 8;
              margin-top: 8;
              margin-start: 8;
              margin-end: 8;
              margin-bottom: 8;

              Gtk.Label {
                label: _("Foreground Colors");
                ellipsize: end;

                styles [ "heading" ]
              }

              Gtk.Button _addFgColorButton {
                icon-name: "list-add-symbolic";

                styles [ "circular" ]
              }
            }

            Gtk.Box {
              halign: center;
              spacing: 8;
              margin-top: 8;
              margin-start: 8;
              margin-end: 8;
              margin-bottom: 8;

              Gtk.Label {
                label: _("Background Colors");

                styles [ "heading" ]
              }

              Gtk.Button _addBgColorButton {
                icon-name: "list-add-symbolic";

                styles [ "circular" ]
              }
            }

            styles [ "card" ]
          }
        };
      }
    }
  }

  Adw.PreferencesPage {
    title: _("Image");
    icon-name: "image-x-generic-symbolic";

    Gtk.Box {
      orientation: vertical;

      Gtk.Box {
        spacing: 6;

        Gtk.Button _addImageButton {
          halign: start;
          margin-top: 12;
          margin-start: 12;
          margin-end: 12;
          margin-bottom: 6;

          Adw.ButtonContent {
            label: _("Add Image");
            icon-name: "list-add-symbolic";
          }
        }

        Gtk.Separator {
          styles [ "spacer" ]
        }

        Gtk.Label {
          margin-top: 6;
          label: _("Scale");
        }

        Gtk.Scale _imageScale {
          hexpand: true;
          margin-top: 6;
          margin-end: 6;
          adjustment: Gtk.Adjustment {
            lower: 0.10;
            upper: 1.0;
            step-increment: 0.05;
          };
        }
      }

      Gtk.Stack _imagesStack
      {
        margin-top: 6;
        margin-start: 12;
        margin-end: 12;
        margin-bottom: 12;

        Gtk.StackPage {
          name: "empty";
          child: Adw.StatusPage {
            vexpand: true;
            title: "No Images";
            description: "Add an image to use it in Cavalier.";
            icon-name: "image-x-generic-symbolic";
          };
        }

        Gtk.StackPage {
          name: "images";
          child: Gtk.ScrolledWindow {
            vexpand: true;
            hscrollbar-policy: never;

            Gtk.FlowBox _imagesFlowBox {
              valign: start;
              margin-top: 6;
              margin-start: 6;
              margin-end: 6;
              margin-bottom: 6;
              homogeneous: true;
              min-children-per-line: 3;

              Gtk.Image {
                icon-name: "x-circular-symbolic";
                tooltip-text: _("No Image");
                pixel-size: 42;
                margin-top: 2;
                margin-start: 2;
                margin-end: 2;
                margin-bottom: 2;

                styles ["cavalier-image"]
              }
            }

            styles ["card"]
          };
        }
      }
    }
  }
}